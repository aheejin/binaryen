(module
 (type $0 (func (param anyref)))
 (type $1 (func (param funcref)))
 (type $2 (func (param exnref)))
 (type $3 (func))
 (type $4 (func (param anyref) (result funcref)))
 (type $5 (func (result anyref)))
 (type $6 (func (result funcref)))
 (type $7 (func (result exnref)))
 (import "env" "import_global" (global $gimport$1 anyref))
 (import "env" "import_func" (func $import_func (param anyref) (result funcref)))
 (table $0 3 3 funcref)
 (elem (i32.const 0) $take_anyref $take_funcref $take_exnref)
 (global $global$0 (mut anyref) (ref.null))
 (global $global$1 (mut funcref) (ref.null))
 (global $global$2 (mut exnref) (ref.null))
 (global $global$3 (mut anyref) (ref.func $foo))
 (global $global$4 (mut funcref) (ref.func $foo))
 (export "export_func" (func $import_func))
 (export "export_global" (global $gimport$1))
 (func $take_anyref (; 1 ;) (type $0) (param $0 anyref)
  (nop)
 )
 (func $take_funcref (; 2 ;) (type $1) (param $0 funcref)
  (nop)
 )
 (func $take_exnref (; 3 ;) (type $2) (param $0 exnref)
  (nop)
 )
 (func $foo (; 4 ;) (type $3)
  (nop)
 )
 (func $test (; 5 ;) (type $3)
  (local $0 anyref)
  (local $1 funcref)
  (local $2 exnref)
  (local.set $0
   (local.get $0)
  )
  (local.set $0
   (local.get $1)
  )
  (local.set $0
   (local.get $2)
  )
  (local.set $0
   (ref.null)
  )
  (local.set $0
   (ref.func $foo)
  )
  (local.set $1
   (local.get $1)
  )
  (local.set $1
   (ref.null)
  )
  (local.set $1
   (ref.func $foo)
  )
  (local.set $2
   (local.get $2)
  )
  (local.set $2
   (ref.null)
  )
  (global.set $global$0
   (global.get $global$0)
  )
  (global.set $global$0
   (global.get $global$1)
  )
  (global.set $global$0
   (global.get $global$2)
  )
  (global.set $global$0
   (ref.null)
  )
  (global.set $global$0
   (ref.func $foo)
  )
  (global.set $global$1
   (global.get $global$1)
  )
  (global.set $global$1
   (ref.null)
  )
  (global.set $global$1
   (ref.func $foo)
  )
  (global.set $global$2
   (global.get $global$2)
  )
  (global.set $global$2
   (ref.null)
  )
  (call $take_anyref
   (local.get $0)
  )
  (call $take_anyref
   (local.get $1)
  )
  (call $take_anyref
   (local.get $2)
  )
  (call $take_anyref
   (ref.null)
  )
  (call_indirect (type $0)
   (local.get $0)
   (i32.const 0)
  )
  (call_indirect (type $0)
   (local.get $1)
   (i32.const 0)
  )
  (call_indirect (type $0)
   (local.get $2)
   (i32.const 0)
  )
  (call_indirect (type $0)
   (ref.null)
   (i32.const 0)
  )
  (call_indirect (type $1)
   (local.get $1)
   (i32.const 1)
  )
  (call_indirect (type $1)
   (ref.null)
   (i32.const 1)
  )
  (call_indirect (type $2)
   (local.get $2)
   (i32.const 2)
  )
  (call_indirect (type $2)
   (ref.null)
   (i32.const 2)
  )
  (drop
   (block $label$1 (result anyref)
    (br_if $label$1
     (local.get $0)
     (i32.const 1)
    )
   )
  )
  (drop
   (block $label$2 (result anyref)
    (br_if $label$2
     (local.get $1)
     (i32.const 1)
    )
   )
  )
  (drop
   (block $label$3 (result anyref)
    (br_if $label$3
     (local.get $2)
     (i32.const 1)
    )
   )
  )
  (drop
   (block $label$4 (result anyref)
    (br_if $label$4
     (ref.null)
     (i32.const 1)
    )
   )
  )
  (drop
   (block $label$5 (result funcref)
    (br_if $label$5
     (ref.null)
     (i32.const 1)
    )
   )
  )
  (drop
   (block $label$6 (result exnref)
    (br_if $label$6
     (ref.null)
     (i32.const 1)
    )
   )
  )
  (drop
   (loop $label$7 (result anyref)
    (local.get $0)
   )
  )
  (drop
   (loop $label$8 (result anyref)
    (local.get $1)
   )
  )
  (drop
   (loop $label$9 (result anyref)
    (local.get $2)
   )
  )
  (drop
   (loop $label$10 (result anyref)
    (ref.null)
   )
  )
  (drop
   (loop $label$11 (result funcref)
    (local.get $1)
   )
  )
  (drop
   (loop $label$12 (result funcref)
    (ref.null)
   )
  )
  (drop
   (loop $label$13 (result exnref)
    (local.get $2)
   )
  )
  (drop
   (loop $label$14 (result exnref)
    (ref.null)
   )
  )
  (drop
   (if (result anyref)
    (i32.const 1)
    (local.get $0)
    (local.get $2)
   )
  )
  (drop
   (if (result anyref)
    (i32.const 1)
    (ref.func $foo)
    (ref.null)
   )
  )
  (drop
   (if (result funcref)
    (i32.const 1)
    (ref.func $foo)
    (ref.null)
   )
  )
  (drop
   (if (result exnref)
    (i32.const 1)
    (local.get $2)
    (ref.null)
   )
  )
  (drop
   (try (result anyref)
    (local.get $0)
    (catch
     (exnref.pop)
    )
   )
  )
  (drop
   (try (result anyref)
    (ref.func $foo)
    (catch
     (drop
      (exnref.pop)
     )
     (ref.null)
    )
   )
  )
  (drop
   (try (result funcref)
    (ref.func $foo)
    (catch
     (drop
      (exnref.pop)
     )
     (ref.null)
    )
   )
  )
  (drop
   (try (result exnref)
    (ref.null)
    (catch
     (exnref.pop)
    )
   )
  )
  (drop
   (select (result anyref)
    (local.get $0)
    (ref.func $foo)
    (i32.const 1)
   )
  )
  (drop
   (select (result anyref)
    (local.get $2)
    (local.get $0)
    (i32.const 1)
   )
  )
  (drop
   (select (result anyref)
    (local.get $0)
    (ref.null)
    (i32.const 1)
   )
  )
  (drop
   (select (result anyref)
    (ref.null)
    (ref.func $foo)
    (i32.const 1)
   )
  )
  (drop
   (select (result funcref)
    (ref.func $foo)
    (ref.null)
    (i32.const 1)
   )
  )
  (drop
   (select (result exnref)
    (ref.null)
    (local.get $2)
    (i32.const 1)
   )
  )
  (drop
   (select
    (i32.const 0)
    (i32.const 2)
    (i32.const 1)
   )
  )
  (drop
   (ref.is_null
    (local.get $0)
   )
  )
  (drop
   (ref.is_null
    (local.get $1)
   )
  )
  (drop
   (ref.is_null
    (local.get $2)
   )
  )
  (drop
   (ref.is_null
    (ref.null)
   )
  )
  (drop
   (ref.is_null
    (ref.func $foo)
   )
  )
 )
 (func $return_anyref (; 6 ;) (type $5) (result anyref)
  (local $0 anyref)
  (local.get $0)
 )
 (func $return_anyref2 (; 7 ;) (type $5) (result anyref)
  (ref.func $foo)
 )
 (func $return_anyref3 (; 8 ;) (type $5) (result anyref)
  (local $0 exnref)
  (local.get $0)
 )
 (func $return_anyref4 (; 9 ;) (type $5) (result anyref)
  (ref.null)
 )
 (func $return_funcref (; 10 ;) (type $6) (result funcref)
  (ref.func $foo)
 )
 (func $return_funcref2 (; 11 ;) (type $6) (result funcref)
  (ref.null)
 )
 (func $return_exnref (; 12 ;) (type $7) (result exnref)
  (local $0 exnref)
  (local.get $0)
 )
 (func $return_exnref2 (; 13 ;) (type $7) (result exnref)
  (ref.null)
 )
 (func $return_anyref_returns (; 14 ;) (type $5) (result anyref)
  (local $0 anyref)
  (local $1 exnref)
  (return
   (local.get $0)
  )
 )
 (func $return_funcref_returns (; 15 ;) (type $6) (result funcref)
  (return
   (ref.func $foo)
  )
 )
 (func $return_exnref_returns (; 16 ;) (type $7) (result exnref)
  (local $0 exnref)
  (return
   (local.get $0)
  )
 )
)

